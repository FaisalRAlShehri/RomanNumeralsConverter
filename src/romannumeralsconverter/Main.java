package romannumeralsconverter;

/**
 *
 * @author Faisal Al-Shehri
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public Main() {
        initComponents();
        res.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        lbl = new javax.swing.JLabel();
        inputBx = new javax.swing.JTextField();
        convert = new javax.swing.JButton();
        res_lbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        res = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        title.setText("Roman Numeral Converter");

        lbl.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        lbl.setText("Enter a decimal number:");

        inputBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBxActionPerformed(evt);
            }
        });

        convert.setText("Convert");
        convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertActionPerformed(evt);
            }
        });

        res_lbl.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        res_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        res_lbl.setText("Result:");

        res.setEditable(false);
        res.setColumns(20);
        res.setFont(new java.awt.Font("Constantia", 0, 14)); // NOI18N
        res.setRows(4);
        res.setBorder(null);
        jScrollPane1.setViewportView(res);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(convert))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl)
                                .addGap(18, 18, 18)
                                .addComponent(inputBx, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(res_lbl)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(title)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl)
                    .addComponent(inputBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(convert)
                .addGap(18, 18, 18)
                .addComponent(res_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBxActionPerformed
        
    }//GEN-LAST:event_inputBxActionPerformed

    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed
        String num = inputBx.getText();
        if(num.isEmpty()){
            num = "Error: Input Cannot be empty.";
        } else if(!num.matches("-?\\d+(\\.\\d+)?")){
            num = "Error: Please enter a decimal\nnumber using Arabic numerals "
                    + "(1, 2, 3 etc.).";
        } else{
           num = converter(Integer.parseInt(num));
        }
        res.setText(num);
        res.setVisible(true);
    }//GEN-LAST:event_convertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convert;
    private javax.swing.JTextField inputBx;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl;
    private javax.swing.JTextArea res;
    private javax.swing.JLabel res_lbl;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    public static String converter(Integer n) {
        if(n > 3999 || n < 1){
            return  "Error: Please enter a number between 1 and 3999.\nAny "
                    + "number below or beyond that is unconvertable\nusing the "
                    + "traditional system.";
        }
        String outcome = "";
        int thousands = n / 1000, hundreds = (n - (thousands * 1000)) / 100,
                tens = (n - (thousands * 1000)) % 100 / 10,
                units = (n - (thousands * 1000)) % 10;
        for (int i = 0; i < thousands; i++) {
            outcome += 'M';
        }
        if (hundreds < 4) {
            for (int i = 0; i < hundreds; i++) {
                outcome += 'C';
            }
        } else if (hundreds == 4) {
            outcome += "CD";

        } else if (hundreds >= 5 && hundreds < 9) {
            outcome += 'D';
            for (int i = 0; i < hundreds - 5; i++) {
                outcome += 'C';
            }
        } else if (hundreds == 9) {
            outcome += "CM";
        }
        if (tens < 4) {
            for (int i = 0; i < tens; i++) {
                outcome += 'X';
            }
        } else if (tens == 4) {
            outcome += "XL";
        } else if (tens >= 5 && tens < 9) {
            outcome += 'L';
            for (int i = 0; i < tens - 5; i++) {
                outcome += 'X';
            }
        } else if (tens == 9) {
            outcome += "XC";
        }
        if (units < 4) {
            for (int i = 0; i < units; i++) {
                outcome += 'I';
            }
        } else if (units == 4) {
            outcome += "IV";

        } else if (units >= 5 && units < 9) {
            outcome += 'V';
            for (int i = 0; i < units - 5; i++) {
                outcome += 'I';
            }
        } else if (units == 9) {
            outcome += "IX";
        }
        return outcome;
    }
}
